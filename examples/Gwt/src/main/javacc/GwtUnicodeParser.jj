/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  JAVA_TEMPLATE_TYPE = "modern";
}

PARSER_BEGIN(GwtUnicodeParser)

import java.io.IOException;
import java.io.PrintStream;

/** Simple brace matcher. */
public class GwtUnicodeParser {

  /** Main entry point.
   *
   * @param args command line args
   * @throws IOException if IO error occurs
   * @throws ParseException if parsing fails
   */
  public static void main(String[] args) throws ParseException, IOException {
    PrintStream output = System.out;
    PrintStream error = System.err;
    PrintStream prevOutput = null;
    PrintStream prevError = null;
    if (args.length == 2) {
      prevOutput = output;
      output = new PrintStream(args[0]);
      prevError = error;
      error = new PrintStream(args[1]);
      System.setOut(output);
      System.setErr(error);
    }
    try {
      GwtUnicodeParser parser = new GwtUnicodeParser(new StringProvider("A"));
      parser.Input();
    } catch (Exception e) {
      error.println(e.getMessage());
    } finally {
      if (prevOutput != null) {
        System.setOut(prevOutput);
      }
      if (prevError != null) {
        System.setErr(prevError);
      }
    }
  }

}

PARSER_END(GwtUnicodeParser)


 /** Root production.
  *
  * @throws ParseException if parsing fails
  */
void Input() :
{}
{

  "A"  {
     System.out.println("hello");
  } <EOF>
}